!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BinaryTreeNode	tree.h	/^typedef struct BinaryTreeNode {$/;"	s
BinaryTreeNode	tree.h	/^} BinaryTreeNode;$/;"	t	typeref:struct:BinaryTreeNode
CC	Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -Wall -O -g$/;"	m
OBJS	Makefile	/^OBJS = $(patsubst %.c, %.o, $(patsubst %.cpp, %.o, $(SOURCES)))$/;"	m
SOURCES	Makefile	/^SOURCES = $(wildcard *.c *.cpp)$/;"	m
TARGET	Makefile	/^TARGET = .\/main$/;"	m
TREE_H	tree.h	20;"	d
XX	Makefile	/^XX = g++$/;"	m
construct	tree.cpp	/^BinaryTreeNode* construct(int *preorder, int *inorder, int length)$/;"	f
convert	tree.cpp	/^BinaryTreeNode* convert(BinaryTreeNode *pRootOfTree)$/;"	f
convert_node	tree.cpp	/^void convert_node(BinaryTreeNode *pNode, BinaryTreeNode **pLastNodeInList)$/;"	f
convert_tree_to_list	main.cpp	/^void convert_tree_to_list()$/;"	f
do_construct	tree.cpp	/^BinaryTreeNode* do_construct(int *pre_start, int *pre_end, int *in_start, int *in_end)$/;"	f
do_find_path	tree.cpp	/^void do_find_path(BinaryTreeNode *pRoot, int expectedSum, std::vector<int> &path, int currentSum)$/;"	f
does_tree1_has_tree2	tree.cpp	/^bool does_tree1_has_tree2(BinaryTreeNode *pRoot1, BinaryTreeNode *pRoot2)$/;"	f
find_path	tree.cpp	/^void find_path(BinaryTreeNode *pRoot, int expectedSum)$/;"	f
find_path_sum	main.cpp	/^void find_path_sum()$/;"	f
get_tree1	main.cpp	/^BinaryTreeNode *get_tree1()$/;"	f
get_tree2	main.cpp	/^BinaryTreeNode *get_tree2()$/;"	f
has_subtree	tree.cpp	/^bool has_subtree(BinaryTreeNode *pRoot1, BinaryTreeNode *pRoot2)$/;"	f
is_seq_of_bst	tree.cpp	/^bool is_seq_of_bst(int seq[], int length)$/;"	f
m_nValue	tree.h	/^    int                     m_nValue;$/;"	m	struct:BinaryTreeNode
m_pLeft	tree.h	/^    struct BinaryTreeNode   *m_pLeft;$/;"	m	struct:BinaryTreeNode	typeref:struct:BinaryTreeNode::BinaryTreeNode
m_pRight	tree.h	/^    struct BinaryTreeNode   *m_pRight;$/;"	m	struct:BinaryTreeNode	typeref:struct:BinaryTreeNode::BinaryTreeNode
main	main.cpp	/^int main()$/;"	f
mirror_recurse	tree.cpp	/^void mirror_recurse(BinaryTreeNode *pRoot)$/;"	f
travel_tree_back	tree.cpp	/^void travel_tree_back(BinaryTreeNode *root)$/;"	f
travel_tree_bfs	tree.cpp	/^void travel_tree_bfs(BinaryTreeNode *root)$/;"	f
travel_tree_dfs	tree.cpp	/^void travel_tree_dfs(BinaryTreeNode *root)$/;"	f
